// Generated by CoffeeScript 1.10.0
(function() {
  var Main, Tsv, main;

  String.prototype.startsWith = function(str) {
    return this.slice(0, str.length) === str;
  };

  String.prototype.endsWith = function(suffix) {
    return this.indexOf(suffix, this.length - suffix.length) !== -1;
  };

  String.prototype.trim = function() {
    return this.replace(/^\s+|\s+$/g, '');
  };

  String.prototype.count = function(str) {
    var a, i, j, len;
    i = 0;
    for (j = 0, len = this.length; j < len; j++) {
      a = this[j];
      if (a === str) {
        i += 1;
      }
    }
    return i;
  };

  Array.prototype.indexOf = function(obj) {
    var a, i, j, len;
    for (i = j = 0, len = this.length; j < len; i = ++j) {
      a = this[i];
      if (obj === a) {
        return i;
      }
    }
    return -1;
  };

  Tsv = (function() {
    function Tsv() {}

    Tsv.load = function(filePath) {
      var a, body, element_num, elements, file, j, len, ref, text;
      file = new File(filePath);
      file.encoding = "UTF-8";
      file.open("r", "TEXT");
      body = [];
      element_num = 0;
      while (!file.eof) {
        text = file.readln();
        if (element_num === 0) {
          element_num = text.count('\t');
        }
        while (element_num > text.count('\t')) {
          text += file.readln();
        }
        elements = [];
        ref = text.split('\t');
        for (j = 0, len = ref.length; j < len; j++) {
          a = ref[j];
          elements.push(a.replace(/\n/g, " ").replace(/\r/g, " ").replace(/  /g, " "));
        }
        body.push(elements);
      }
      file.close();
      return body;
    };

    return Tsv;

  })();

  Main = (function() {
    function Main() {}

    Main.prototype.run = function() {
      var data, filePath, root;
      root = app.activeDocument;
      filePath = File.openDialog("tsv選択", "*.tsv");
      if (filePath) {
        data = Tsv.load(filePath);
        return this.replace(root, data);
      }
    };

    Main.prototype.replace = function(root, dict) {
      var a, e, index, j, k, keyIndex, l, len, len1, len2, len3, line, m, original, ref, ref1, text, textFrame, used, valueIndex, warning;
      keyIndex = 0;
      valueIndex = 0;
      ref = dict[0];
      for (index = j = 0, len = ref.length; j < len; index = ++j) {
        e = ref[index];
        if (e === 'KEY' || e === 'Key' || e === 'key') {
          keyIndex = index;
        }
        if (e === 'VALUE' || e === 'Value' || e === 'value') {
          valueIndex = index;
        }
      }
      if (keyIndex === 0 && valueIndex === 0) {
        alert("1行目にKEY, VALUEが見つかりません。");
        return;
      }
      dict.sort(function(a, b) {
        return b[keyIndex].length - a[keyIndex].length;
      });
      used = [];
      ref1 = root.textFrames;
      for (k = 0, len1 = ref1.length; k < len1; k++) {
        textFrame = ref1[k];
        if (textFrame.locked) {
          continue;
        }
        if (textFrame.visible) {
          continue;
        }
        text = textFrame.contents.replace(/\n/g, " ").replace(/\r/g, " ").replace(/  /g, " ");
        original = text;
        for (index = l = 0, len2 = dict.length; l < len2; index = ++l) {
          line = dict[index];
          a = text;
          if (line[keyIndex] === "" || line[valueIndex] === "") {
            continue;
          }
          text = text.replace(line[keyIndex], line[valueIndex]);
          if (a !== text) {
            used.push(index);
          }
        }
        if (text !== original) {
          textFrame.contents = text;
        }
      }
      warning = [];
      for (index = m = 0, len3 = dict.length; m < len3; index = ++m) {
        line = dict[index];
        if (used.indexOf(index) !== -1) {
          continue;
        }
        warning.push(index + "行目 - " + line[keyIndex]);
      }
      if (warning.length > 0) {
        return alert("使用されなかったデータがあります。\n" + (warning.join('\n')));
      }
    };

    return Main;

  })();

  main = new Main();

  main.run();

  alert('complete!');

}).call(this);
